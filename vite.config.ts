//добавляем  import
import { resolve } from 'path'

import { defineConfig } from 'vite'

//импрортируем для внешних зависимостей - добавить в tsconfig.node.json
import { dependencies, devDependencies } from './package.json'

// https://vitejs.dev/config/
export default defineConfig({
  build: {
    lib: {
      //Обязательно указать  имя входного файла обычно 'lib/main.ts'
      entry: resolve(__dirname, 'src/index.ts'),
      // the proper extensions will be added
      fileName: 'index', //название файла
      // formats: ['es'] в конфигурации сборки означает, что ваша библиотека будет собрана в формате ECMAScript (ES) Module. ES модули позволяют использовать современный синтаксис JavaScript и предоставляют механизм импорта и экспорта, который стал стандартом в современной веб-разработке.
      //   Когда ваша библиотека будет собрана с использованием этого формата, она будет доступна для импорта в других проектах, которые также поддерживают ES модули. Это позволяет легко интегрировать вашу библиотеку в современные проекты, которые используют инструменты сборки, такие как webpack или Rollup, и поддерживают синтаксис ES модулей.
      formats: ['es'],
      name: 'gs-ui-kit-lib', //название проект - библиотеки
    },
    //Тоже самое что указано выше в lib, поэтому можно не указывать
    // output: { dir: 'dist', entryFileNames: '[name].js', format: 'es' },
    // rollupOptions - сборщик который работает под капотом гит - упаковщик
    rollupOptions: {
      //external - внешние зависимости, т.е. то, что не будет бандиться
      // external - в конфигурации сборки указывает на внешние зависимости, которые не будут включены в сборку вашей библиотеки, а вместо этого будут ожидаться в среде, где ваш пакет будет использоваться.
      // тут :
      //   'react/jsx-runtime' указывает на то, что вы ожидаете, что React будет предоставлен в среде, где будет использоваться ваш пакет. react/jsx-runtime - это часть React, которая обрабатывает JSX во время выполнения.
      // Object.keys(dependencies) включает все зависимости, указанные в вашем package.json в разделе dependencies. Это означает, что вы предполагаете, что эти зависимости будут предоставлены средой, где будет использоваться ваш пакет.
      // Object.keys(devDependencies) включает зависимости, указанные в разделе devDependencies вашего package.json, то есть зависимости, которые используются только во время разработки. Включение их в external говорит о том, что они также должны быть предоставлены средой выполнения.
      //   Обычно внешние зависимости не включаются в сборку библиотеки, чтобы пользователи могли явно указать, какие версии этих зависимостей они хотят использовать.
      external: [
        'react/jsx-runtime',
        ...Object.keys(dependencies),
        ...Object.keys(devDependencies),
      ],
    },
    // sourceMap: true в конфигурации сборки означает, что вы хотите создать source map для вашей собранной библиотеки. Source map - это дополнительный файл, который связывает исходный код вашей библиотеки с её собранной версией. Он обеспечивает соответствие между строками кода в вашем исходном файле и строками кода в собранном файле, что упрощает отладку и профилирование вашего кода.
    sourcemap: true,
    // target: 'esnext' указывает на версию JavaScript, на которую будет нацелена ваша сборка. Здесь esnext означает использование самых последних возможностей и синтаксических конструкций ECMAScript. В этом случае, ваша библиотека будет собрана с использованием всех современных возможностей JavaScript, которые поддерживаются вашим инструментом сборки и окружением выполнения.
    //!!!!!ВАЖНО при этом генерируется файл index.js.map, который может занимать много места. Если не хватает памяти при билде - убрать sourcemap:true!!!!!!
    target: 'esnext',
  },
})
